var searchIndex = JSON.parse('{\
"graph_algorithms":{"doc":"","t":[5,5,5,5,5,0,5,0,0,0,0,0,0,3,3,11,5,11,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,3,11,5,11,5,11,11,12,11,11,11,11,11,11,12,0,3,11,5,11,11,11,5,12,11,11,11,11,11,11,12,0,3,12,11,11,5,11,11,11,11,11,12,0,5,5],"n":["bellmanford","bfs","dfs","dijkstras","kosaraju","list_of_algorithms","main","bellmanford","bfs","dfs","dijkstras","kosaraju","bellmanford","Graph","Node","add_edge","add_weights","bellman_ford","bellmanford","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","dist","edges","eq","from","from","into","into","new","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vertex","vertices","bfs","Graph","add_edge","add_edges","b_fs","bfs","borrow","borrow_mut","edges","from","into","new","try_from","try_into","type_id","vertices","dfs","Graph","add_edge","add_edges","borrow","borrow_mut","d_fs","dfs","edges","from","into","new","try_from","try_into","type_id","vertices","dijkstras","Graph","adj_list","borrow","borrow_mut","dijkstras","from","into","try_from","try_into","type_id","vertices","kosaraju","kosaraju","kosaraju_algorithm"],"q":["graph_algorithms","","","","","","","graph_algorithms::list_of_algorithms","","","","","graph_algorithms::list_of_algorithms::bellmanford","graph_algorithms::list_of_algorithms::bellmanford::bellmanford","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","graph_algorithms::list_of_algorithms::bfs","graph_algorithms::list_of_algorithms::bfs::bfs","","","","","","","","","","","","","","","graph_algorithms::list_of_algorithms::dfs","graph_algorithms::list_of_algorithms::dfs::dfs","","","","","","","","","","","","","","","graph_algorithms::list_of_algorithms::dijkstras","graph_algorithms::list_of_algorithms::dijkstras::dijkstras","","","","","","","","","","","graph_algorithms::list_of_algorithms::kosaraju","graph_algorithms::list_of_algorithms::kosaraju::kosaraju",""],"d":["Performs Bellmanford algorithm on a given weighted graph. …","Performs Breadth First Search algorithm on a given graph …","Performs Depth first search algorithm on a given directed …","Performs Dijkstra’s algorithm on a given directed graph …","Performs Kosaraju’s algorithm on a given directed graph …","","The <code>main</code> function displays a list of different algorithms …","","","","","","","","","Adding edges to the graph","","Bellman-Ford algorithm Bellman ford algorithm is used to …","Performs Bellmanford algorithm on a given weighted graph. …","","","","","","","","","representation using edge list","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","total no of vertices","","A graph data structure with adjacency list representation.","Adds an edge between two vertices in the graph.","","BFS algorithm Performs a Breadth-First Search on a given …","Performs Breadth First Search algorithm on a given graph …","","","The edges of the graph stored as adjacency lists.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The total number of vertices in the graph.","","A graph data structure with adjacency list representation.","Adds an edge between two vertices in the graph.","To return the vertices of each edge as a graph","","","DFS algorithm Performs a Depth-First Search on a given …","Performs Depth first search algorithm on a given directed …","The edges of the graph stored as adjacency lists.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The total number of vertices in the graph.","","A graph data structure represented as an adjacency list.","The adjacency list of the graph, where the i-th element …","","","Performs Dijkstra’s algorithm on a given directed graph …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","The total number of vertices in the graph.","","Performs Kosaraju’s algorithm on a given directed graph …","The Kosaraju’s algorithm is used to find strongly …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,5,1,5,5,5,5,5,1,5,1,5,1,5,1,5,5,1,5,1,5,1,5,5,1,0,0,11,0,11,0,11,11,11,11,11,11,11,11,11,11,0,0,12,0,12,12,12,0,12,12,12,12,12,12,12,12,0,0,14,14,14,0,14,14,14,14,14,14,0,0,0],"f":[[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,0,0,0,0,0,0,[[1,2,2,3]],[[2,2,3],1],[[1,2],[[4,[3]]]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],[[5,5],6],0,0,[[5,5],7],[[]],[[]],[[]],[[]],[2,1],[[5,5],[[8,[6]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,[[11,2,2]],[[2,3],11],[[11,2],[[4,[2]]]],[[]],[[]],[[]],0,[[]],[[]],[2,11],[[],9],[[],9],[[],10],0,0,0,[[12,2,2]],[[2,3],12],[[]],[[]],[[12,2,13],[[4,[2]]]],[[]],0,[[]],[[]],[2,12],[[],9],[[],9],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],10],0,0,[[]],[4,[[4,[[4,[2]]]]]]],"p":[[3,"Graph"],[15,"usize"],[15,"i32"],[3,"Vec"],[3,"Node"],[4,"Ordering"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Graph"],[3,"Graph"],[3,"HashSet"],[3,"Graph"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
